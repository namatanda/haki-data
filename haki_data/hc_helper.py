import pandas as pd
import argparse
import logging

from .constants import NAME_MAP 


def map_names(name: str) -> str:
    """
    Apply name mapping rules to transform court names.

    Args:
        name (str): The original court name.

    Returns:
        str: The mapped and partially transformed court name.
    """
    for key, value in NAME_MAP.items():
        name = name.replace(key, value)
    transformed_name = name.split()[0]
    logger.debug(f"Mapped name: '{name}' to '{transformed_name}'")
    return transformed_name

def transform_court_names(df: pd.DataFrame) -> pd.DataFrame:
    """
    Apply a series of transformations to the court names in the DataFrame.

    Args:
        df (pd.DataFrame): DataFrame containing 'court_name' column.

    Returns:
        pd.DataFrame: Transformed DataFrame with a new 'court' column.
    """
    logger.info("Starting court name transformation process")
    
    # Apply name mapping and create the 'court' column
    df['court'] = df['court_name'].apply(map_names)
    logger.info("Applied name mapping to 'court_name' column")

    # Retain original 'court_name' for entries where 'court' is 'Milimani'
    milimani_count = df.loc[df['court'] == 'Milimani'].shape[0]
    df.loc[df['court'] == 'Milimani', 'court'] = df['court_name']
    logger.info(f"Retained original 'court_name' for {milimani_count} entries with court as 'Milimani'")

    # Remove redundant prefix and normalize whitespace
    df['court'] = df['court'].str.replace("High Court_High Court", "", case=False, regex=False)
    df['court'] = df['court'].str.replace(r'\s+', ' ', regex=True).str.strip()
    logger.info("Removed redundant prefixes and normalized whitespace in 'court' column")
    df = df.drop(columns=['court_name'])
    logger.info("Court name transformation process completed")
    return df

# def main(input_file: str, output_file: str) -> None:
#     """
#     Main function to process court name transformations.

#     Args:
#         input_file (str): Path to the input CSV file generated by dcrt_processor.py.
#         output_file (str): Path to save the transformed CSV file.
#     """
#     logger.info(f"Loading data from {input_file}")
#     df = pd.read_csv(input_file)
#     logger.info(f"Data loaded successfully, starting transformations on {len(df)} rows")

#     # Apply transformations
#     transformed_df = transform_court_names(df)
    
#     # Save the transformed data
#     transformed_df.to_csv(output_file, index=False)
#     logger.info(f"Transformed data saved to {output_file}")

# if __name__ == "__main__":
#     parser = argparse.ArgumentParser(description="Transform court names in the processed court data.")
#     parser.add_argument('input_file', type=str, help='Path to the CSV file from dcrt_processor.py')
#     parser.add_argument('output_file', type=str, help='Path to save the transformed CSV file')

#     args = parser.parse_args()
#     main(args.input_file, args.output_file)
